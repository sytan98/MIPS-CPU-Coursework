addiu_1:Adding 2 positive numbers
addiu_2:Test sign extension of immediate by adding positive number and negative number to give positive output.
addiu_3:Test sign extension of immediate by adding a positive number and negative number to give negative output.
addiu_4:Test sign extension of immediate by adding positive number and negative number to give negative output.
addiu_5:Adding 2 positive numbers where first 4 bytes are 0000
addiu_sanity_1
addiu_t0:Add to $0 --> should not change $0
addu_1:Load $4 and $5 with 0xfffe0000 and 0x1 respectively. Add $4 and $5 into $2.
addu_2:Add two negative numbers of extreme values 0xffffffff
addu_3:Add two positive numbers
addu_4:Add negative number with zero
addu_5:Add positive and negative numbers
and_1:And 0xffffa5a5 and 0x00005a6a
and_2:And with 0 results in 0
and_3:And 0xffffffff with itself to test all 32 bits
and_4:And with 0xffffffff, should not change the other register value
and_5:And with 0xfffff000 should mask out least significant 12 bits
andi_1:And 0x00001aaa (reg value) with 0x5555 (immediate), and then and reseult with 0xdddf. check for zero extension of immediate
andi_2:And 0xffffffff (reg value) with 0x0000 (immediate)
andi_3:And 0xffffffff (reg value) with 0xffff (immediate). check for zero extension of immediate.
andi_4:And 0xffff8000 (reg value) with 0xffff (immediate). check for zero extension of immediate
andi_5:And 0x1010 with 0x0101
beq_1:Test that comparison of register with itself results in branch taken. Test branch forwards
beq_2:Test that comparison of 2 different registers with 2 different values results in branch not taken.
beq_3:Test that comparison of register with itself results in branch taken. Test branch forwards
beq_4:Test that comparison of 2 different registers with same value results in branch taken. Test branch forwards
beq_5:Test that comparison of 2 different registers with 2 different values results in branch not taken.
beq_6:Test BEQ backwards branching
beq_7:Test delay slot
beq_fib_1:Find the 10th Fibonacci term. Tests recursion and stack pointer management.
beq_finder:Search through a list of 10 integers and find 0, return the index
bgez_1:Test that branch is taken when register value greater than 0. Test branch forwards.
bgez_2:Test that branch is taken when register value greater than 0. Test branch forwards.
bgez_3:Test that branch is taken when register value is equal to 0. Test branch forwards.
bgez_4:Test that branch is not taken when register value is less than 0.
bgez_5:Test branching backwards when greater than 0.
bgez_6:Test delay slot
bgezal_1:Test branch works for greater than 0. Test branch forwards.
bgezal_2:Test branch taken when register value greater than 0. Test link register $31 updates correctly. Test branch forwards.
bgezal_3:Test branch works for equal to 0. Test branch forwards.
bgezal_4:Test branch not taken when register value less than 0. Test link register $31 updates correctly.
bgezal_5:Test branching backwards
bgezal_6:Test delay slot
bgtz_1:Test it doesn't branch when equal to 0. Test branch forwards
bgtz_2:Test it branches when register value greater than 0. Test branch forwards.
bgtz_3:Test it doesn't branch when equal to 0 and that registers are initialised to 0.
bgtz_4:Test it doesn't branch when less than 0. Test branch forwards.
bgtz_5:Test branching backwards wheb greater than 0.
bgtz_6:Test delay slot
blez_1:Test it branches when less than zero. Test branch forwards.
blez_2:Test it doesn't branch when greater than 0.
blez_3:Test it branches when equal to 0
blez_4:Test it branches when less than zero.
blez_5:Test branching backwards when less than 0.
blez_6:Test delay slot
bltz_1:Test it doesn't branch when greater than 0.
bltz_2:Test it doesn't branch when greater than 0.
bltz_3:Test it doesn't branch when equal to 0.
bltz_4:Test it branches when less than 0. Test branch forwards.
bltz_5:Test branching backwards when less than 0
bltz_6:Test delay slot
bltzal_1:Branch when negative
bltzal_2:No branch when equal to 0. Test link register $31 updates correctly
bltzal_3:No branch when positive. Test link register $31 updates correctly
bltzal_4:Branch when negative. Test link register $31 updates correctly
bltzal_5:Test branching backwards when less than zero.
bltzal_6:Test delay slot
bne_1:Test branch taken when 2 registers with 2 different values are compared. Test branch forwards.
bne_2:Test branch taken when 2 registers with 2 different values are compared. Test branch forwards.
bne_3:Test branch not taken when 2 registers with equal values are compared.
bne_4:Test branch taken when 2 registers with 2 different values are compared. Test branch forwards.
bne_5:Test branching backwards when 2 registers with 2 different values are compared.
bne_6:Test delay slot
bne_7: Test branch not taken when register is compared with itself.
bne_binseq:Shift left 15 times using bne to branch back
div_1:Divide larger number by smaller number (both positive). 10/5 should result in lo=2. checking quotient in lo
div_2:Divide larger number by smaller number (both positive). 11/5 should result in lo=2. checking quotient in lo
div_3:Divide larger number by smaller number (both positive). 0x000b0000/0x00050000 should result in hi=0x10000. checking remainder in hi
div_4:Divide smaller number by larger number. 5/10 should result in lo=0. checking quotient in lo, should be 0.
div_5:Divide positive number with negative number. 0x0000fff by -1 results in 0 in hi. checking remainder in hi.
div_6:Divide positive number with negative number. 0x0000fff by -1 results in 0 in hi. checking quotient in lo, should be negative of the positive number
div_7:Divide smaller number by larger number. 5/10 should result in hi=5. checking remainder in hi
div_8:Divide 0 by a number. check quotient in lo, should be 0.
div_9:Divide 0 by a number. check remainder in hi, should be 0.
div_10:Divide 0xfffefff0 by 0x00000004. check quotient in lo, should be 0xffffbffc
divu_1:Divide larger number by smaller number. checking quotient in lo
divu_2:Divide larger number (w/ least signifcant half 0000) by smaller number (w/ most significant half 0000). checking quotient in lo
divu_3:Divide smaller number by larger number. checking remainder in hi (should be equal to smaller number)
divu_4:Divide larger number by smaller number. checking remainder in hi.
divu_5:Divide larger number by smaller number with no remainder. checking remainder in hi (should be equal to 0)
divu_6:Divide 0xfffffff0 by 0x00000004. check quotient in lo, should be 0x3fffbffc
divu_7:Divide 0 by a number. check quotient in lo, should be 0.
divu_8:Divide 0 by a number. check remainder in hi, should be 0.
j_1:Test jumping forwards
j_2:Test jumping backwards
j_3:delay slot test
j_4:delay slot test
jal_1:Test jumping forwards
jal_2:Test jumping backwards
jal_3:delay slot test
jal_4:delay slot test
jal_edge:Test Linking of jal_2, stores value of $31 to v0, should be 0xbfc0002c
jalr_1:Test jumping forwards
jalr_2:Test jumping backwards
jalr_3:delay slot test
jalr_4:delay slot test
jalr_edge:Test Linking of jalr_2, stores value of $31 to v0, should be 0x0
jr_1:Test jumping forwards
jr_2:Test jumping backwards
jr_3:delay slot test
jr_4:delay slot test
lb_1:Loading least significant byte by storing and loading from same effective address
lb_2:Loads the byte after the most significant byte by adding 0x2 to the address offset in which the word was stored
lb_3:Test storing negative number and loading byte from unaligned address
lb_4:Test loading least significant byte of 0xfffd0000 from unaligned address
lb_edge: Test loading least significant byte of 0xfffd0000 from midpoint of aligned address
lbu_1:Load byte after most significant byte
lbu_2:Load byte after most significant byte from word aligned at address 0xc
lbu_3:Load byte from negative number
lbu_edge:Tests loading least significant byte of 0xfffd0000 from odd unaligned address
lh_1:Load negative half word
lh_2:Load second half of word
lh_3:Load first half of 0xfffd0000 to make sure word is stored correctly
lh_4:Load second half of 0xfffd0000
lhu_1:Load first half of positive number
lhu_2:Load second half of word
lhu_3:Load second half of negative number 0xfffd0000
lui_1:Load many positive numbers and add them
lui_2:Load 0x703a
lui_3:Load 0xffff
lw_1:Load word into address 0xc($9), where 0x0ddd0000 is in $9
lw_2:Load word with data in most significant 2 bytes
lw_3:Load negative number in most significant 2 bytes
lw_4:Load byte from negative word, store it, and then load entire word
lw_edge:Loads word into register $2 from instruction memory locations
lwl_1:Testing LWL with last 2 LSB of Mem Address = 2’b00 (load least significant byte into reg from the left)
lwl_2:Testing LWL with last 2 LSB of Mem Address = 2’b01 (load last 2 significant bytes into reg from the left)
lwl_3:Testing LWL with last 2 LSB of Mem Address = 2’b10 (load last 3 significant bytes into reg from the left)
lwl_4:Testing LWL with last 2 LSB of Mem Address = 2’b11 (load entire word into reg)
lwr_1:Testing LWR with last 2 LSB of Mem Address = 2’b00 (load entire word into reg)
lwr_2:Testing LWR with last 2 LSB of Mem Address = 2’b01 (load 3 most significant bytes into reg from the right)
lwr_3:Testing LWR with last 2 LSB of Mem Address = 2’b10 (load 2 most signifcant bytes into reg from the right)
lwr_4:Testing LWR with last 2 LSB of Mem Address = 2’b11 (load most significant byte into reg from the right)
mfhi_1:Move 0xffff0000 to $HI and then from $HI to $2
mfhi_2:Move 0x0000000f to $HI and then from $HI to $2
mfhi_3:Multiply 0x0000000a by 0x00000005 and then move the value from $HI to S2. Expected value of $HI = 0x0
mfhi_4:Divide 0x00000567 by 0x00000fff and then move the value from $HI to $2. Expected value of $HI = remainder of operation
mfhi_5:Move 0x0000000a to $HI and then from $HI to $2
mflo_1:Move 0xffff0000 to $LO and then from $LO to $10 and then $2
mflo_2:Move 0xffffffff to $LO and then from $LO to S2
mflo_3:Divide 0x0000000f by 0x00000005 and move the value from $LO to $2. Expected value of $LO = quotient of operation
mflo_4:Divide 0x00000005 by 0x0000000f and move the value from $LO to $2. Expected value of $LO = quotient of operation, 0
mflo_5:Multiply 0x0000123f by 0x0000012a and then move the value from $LO to $2
mflo_t0:Test that moving lo register value to $0 does not change $0
mthi_1:Move 0xffff0000 to $HI and then to $2
mthi_2:Move 0xffffffff t0 $HI and then to $2
mthi_3:Do a division and then overwrite $HI with MTHI instruction
mthi_4:Move 0xffffabcd to $HI
mtlo_1:Move 0xffff0000 to $LO
mtlo_2:Move 0x00000005 to $LO
mtlo_3:Move 0xfffff005 to $LO
mtlo_4:Move to $LO and then overwrite $LO with DIV instruction
mtlo_5:Move to $LO and then overwrite $LO with MULT instruction
mult_1:Signed multiplication of 2 positive numbers and then MFLO. result is 32 bits or smaller.
mult_2:Signed multiplication of a positive number with a negative number and then MFLO. result is 32 bits or smaller.
mult_3:Signed multiplication of 2 positive numbers and then MFLO. result is 32 bits or smaller.
mult_4:Signed multiplication of 2 positive numbers and then MFLO. result is 32 bits or smaller.
mult_5:Signed multiplication of a positive number with a negative number and then MFLO. result is 32 bits or smaller.
mult_6: Signed multiplication of 2 positive numbers and then MFHI. result is 32 bits or smaller.
mult_7:Signed multiplication of a positive number with a negative number and then MFHI. result is 32 bits or smaller. hi should contain all f
mult_8: Signed multiplication of 2 negative numbers and then MFHI. result is 32 bits or smaller.
mult_9: Signed multiplication of 2 negative numbers and then MFHI. result is 32 bits.
mult_10: Signed multiplication of 2 positive numbers and then MFHI. result is greater than 32 bits.
mult_11: Signed multiplication of number with 0 and then MFLO.
mult_factorial:Find factorial of 5
multu_1:Unsigned multiplication of 2 positive numbers and then MFLO. result is 32 bits or smaller
multu_2:Unsigned multiplication of a positive number with a negative number and then MFLO. result is 32 bits or smaller
multu_3:Unsigned multiplication of a negative number with 0 and then MFLO. 
multu_4:Unsigned multiplication of a positive number with a negative number and then MFLO. result is 32 bits or smaller.
multu_5:Unsigned multiplication of a positive number with a negative number and then MFLO. results is 32 bits or smaller.
multu_6:Unsigned multiplication of 2 positive numbers and then MFHI. result is 32 bits or smaller. 
multu_7: Unsigned multiplication of 2 negative numbers and then MFHI. result is 64 bits.
multu_8: Signed multiplication of 2 positive numbers and then MFHI. result is greater than 32 bits.
or_1:bitwise logical or of 0x5a5a0000 with 0xa5a50000
or_2:bitwise logical or of 0xffffffff with 0x00000000
or_3:bitwise logical or of 0x00000000 with 0x00000000
or_4:bitwise logical or of 0x00001010 with 0x00000101
or_5:bitwise logical or of 0x00000abb with 0x00000000
ori_1:bitwise logical or of 0x00000000 with 0x00005555 (immediate), then 0x00005555 with 0x0000000a (immediate)
ori_2:bitwise logical or of 0xffffffff with 0x00000000 (immediate)
ori_3:bitwise logical or of 0xffff9000 with 0x00008000 (immediate)
ori_4:bitwise logical or of 0x00000000 with 0x00000000 (immediate)
ori_5:bitwise logical or of 0x00001010 with 0x00000101 (immediate)
ori_6:bitwise logical or of 0x000075a with 0xf012 (immediate) check for zero extension of immedidate)
sb_1:Store 8 least significant bits of 0x1234 to address of multiple 4, should only have 0x34 in address
sb_2:Store 8 least significant bits of 0xffffffff to address of multiple 4, should only have 0xFF in address
sb_3:Store 8 least significant bits of 0x0fff to address of multiple 2, should only have 0xFF00 in address
sb_4:Store 8 least significant bits of 0x0fff to address of multiple 2, should only have 0xFF00 in address
sb_5:Store 8 least significant bits of 0x1309 to address of multiple 4, should only have 0xF0000 in address
sb_edge:Stores word in unaligned memory location and loads from aligned to load single byte from initial word
sh_1:Store half of 0x654321, should only have 0x4321 in address
sh_2:Store half of 0xffffffff to address of multiple 4, should only have 0xFFFF in address
sh_3:Store half of 0xffffffff to address of multiple 2, should only have 0xFFFF0000 in address
sh_4:Store half of 0x1010 to address of multiple 2, should only have 0x10100000 in addresss
sh_5:Store half of 0xffffffff to address of multiple 2, should only have 0xffff0000 in address
sll_1:Adds 0xffaa which is sign extended, multiple shifts and moving to registers. Should eventually shifted left by 24 bits
sll_2:Shift 0x1 left by 1 bit
sll_3:Shift 0x1 left by 15 bits
sll_4:Shift 0x1 left by 30 bits
sll_5:Shift 0x1 left by 31 bits
sll_6:Testing if it takes low order 5 bits of rs. Shift 0x1 by ff, but should only shift by 1f
sll_7:Shift 0xffff left by 15 bits
sll_power:Shifts 2 to the left 4 times
sllv_1:Shift 0xffaa left by 4 bits. Immediate Value should be sign extended
sllv_2:Shift 0x1 left by 1 bit
sllv_3:Shift 0x1 left by 15 bits
sllv_4:Shift 0x1 left by 30 bits
sllv_5:Shift 0x1 left by 31 bits
sllv_6:Testing if it takes low order 5 bits of rs. Shift 0x1 by ff, but should only shift by 1f
sllv_7:Shift 0xffff left by 15 bits
slt_1:Testing 0xa < 0xb
slt_2:Testing 0x3 < 0xf
slt_3:Testing 0x1234 not equals 0xabcd
slt_4:Testing 0x8000 < 0xabcd
slt_5:Testing if register is reset properly by comparing 0x0 with 0x0 in two different registers.
slti_1:Testing 0xb < 0xc (rs < immediate)
slti_2:Testing 0x3 < 0xf
slti_3:Testing 0x1234 not less than abcd
slti_4:Testing 0x8000 < 0xabcd
slti_5:Testing 0x0 not less than 0x0
sltiu_1:Testing rs and imdt w/ both MSB=0, with rs < imdt
sltiu_2:Testing rs = imdt
sltiu_3:Testing rs w/ MSB=1 and imdt w/ MSB=0, with rs > imdt
sltiu_4:Testing rs w/MSB=0 and imdt w/ MSB=1, with rs < imdt
sltiu_5:Testing rs and imdt w/ both MSB = 1, with rs < imdt
sltu_1:Testing rs and rt w/ both MSB=0, with rs > rt
sltu_2:Testing rs = rt
sltu_3:Testing rs w/ MSB=1 and rt w/ MSB=0 (so rs < rt)
sltu_4:Testing rs and rt w/ both MSB=1, with rs > rt
sltu_5:Testing rs w/ MSB=0 and rt w/ MSB=1 (so rs > rt)
sra_1:Testing rs with MSB = 1
sra_2:Testing rs with MSB = 1, shamt at maximum at 5'b11111
sra_3:Testing rs with MSB = 0
sra_4:Testing rs with MSB = 0, shamt at 5'b11110
sra_5:Testing rs with MSB = 0
srav_1:Testing rt with MSB = 0
srav_2:Testing rt with MSB = 1
srav_3:Testing rt with MSB = 1, with lower order 5 bits of rs = 5'b11111
srav_4:Testing rt with MSB = 0, with lower order 5 bits of rs = 5'b11110
srl_1:right shift 0xabc00000 >> 0x8
srl_2:right shift 0xffffffff >> 0x10
srl_3:right shift 0x80050000 >> 0x1f (max shift) -> output is 1
srl_4:right shift 0xf00f0000 >> 0x1f (max shift)
srl_5:right shift 0xfaaaa0b3 >> 0x1e
srlv_1:right shift 0xabcd0000 >> 2 (register's value)
srlv_2:right shift 0x78880000 >> 0xfffff010 (check it keeps the 5 LSBs)
srlv_3:right shift 0xffff0000 >> 0xffffabdf (check it keeps the 5 LSBs)
srlv_4:right shift 0xffff0000 >> 0x00000bdf (check it keeps the 5 LSBs)
subu_1:subtracting 0xabcd0000 from 0xffff0000
subu_2:subtracting 0x00004321 from 0xffffffff
subu_3:subtracting 0xffffffff from 0 -> result is the absolute value of signed 0xffffffff
subu_4:subtracting 0x1 from 0 -> result is negative -1 (0xffffffff)
subu_5:subtracting 0xfffff0aa from 0xfffff001
sw_1:storing 0x01050000 at mem[0xac (immediate) + 0x1bfc0000 (register value)]
sw_2:storing 0x0105 at mem[0xac (immediate) + 0x1bfc (register value)]
sw_3:storing 0xffffffff at mem[0xaa0 (immediate) + 0x1bfc0000 (register value)]
sw_4:storing (0x0-0x105) at mem[0xac3 (immediate) + 0x105 (register value)]
sw_5:storing (0x105*0xfffff001)[31:0] at mem[0xac8 (immediate) + 0x0 (register value)]
xor_1:bitwise logical xor 0xabcd with 0xf0f0
xor_2:bitwise logical xor 0x1010 with 0x1011
xor_3:bitwise logical xor 0xffffffff with 0x00001234
xor_4:bitwise logical xor 0x0fff with 0 -> no change
xor_5:bitwise logical xor 0xfffff00f with 0xfffff00f
xori_1:bitwise logical xor (0xabcd0000^0xf0f00000)^0xffffffff -> all bits of first bitwise logical xor operation inverted
xori_2:bitwise logical xor 0x0123 with 0 -> no change
xori_3:bitwise logical xor 0xffff000 with 0x00000fff
xori_4:bitwise logical xor 0x0101 with 0x1010
xori_5:bitwise logical xor 0xffffabcd with 0xffffdabc (checking immediate sign-extension)
xori_6:xor 0xffff8000 with 0x8000 (check immediate zero-extension)
xori_pseudo:Solves equation involving xori, multiplication and addition
