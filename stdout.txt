addiu_1 addiu Pass   # Adding 2 positive numbers
addiu_2 addiu Pass   # Test sign extension of immediate by adding positive number and negative number to give positive output.
addiu_3 addiu Pass   # Test sign extension of immediate by adding a positive number and negative number to give negative output.
addiu_4 addiu Pass   # Test sign extension of immediate by adding positive number and negative number to give negative output.
addiu_5 addiu Pass   # Adding 2 positive numbers where first 4 bytes are 0000
addiu_sanity_1 addiu Pass
addiu_t0 addiu Pass   # Add to $0 --> should not change $0
addu_1 addu Pass   # Load $4 and $5 with 0xfffe0000 and 0x1 respectively. Add $4 and $5 into $2.
addu_2 addu Pass   # Add two negative numbers of extreme values 0xffffffff
addu_3 addu Pass   # Add two positive numbers
addu_4 addu Pass   # Add negative number with zero
addu_5 addu Pass   # Add positive and negative numbers
and_1 and Pass   # And 0xffffa5a5 and 0x00005a6a
and_2 and Pass   # And with 0 results in 0
and_3 and Pass   # And 0xffffffff with itself to test all 32 bits
and_4 and Pass   # And with 0xffffffff, should not change the other register value
and_5 and Pass   # And with 0xfffff000 should mask out least significant 12 bits
andi_1 andi Pass   # And 0x00001aaa (reg value) with 0x5555 (immediate), and then and reseult with 0xdddf. check for zero extension of immediate
andi_2 andi Pass   # And 0xffffffff (reg value) with 0x0000 (immediate)
andi_3 andi Pass   # And 0xffffffff (reg value) with 0xffff (immediate). check for zero extension of immediate.
andi_4 andi Pass   # And 0xffff8000 (reg value) with 0xffff (immediate). check for zero extension of immediate
andi_5 andi Pass   # And 0x1010 with 0x0101
beq_1 beq Pass   # Test that comparison of register with itself results in branch taken. Test branch forwards
beq_2 beq Pass   # Test that comparison of 2 different registers with 2 different values results in branch not taken.
beq_3 beq Pass   # Test that comparison of register with itself results in branch taken. Test branch forwards
beq_4 beq Pass   # Test that comparison of 2 different registers with same value results in branch taken. Test branch forwards
beq_5 beq Pass   # Test that comparison of 2 different registers with 2 different values results in branch not taken.
beq_6 beq Pass   # Test BEQ backwards branching
beq_7 beq Pass   # Test delay slot
beq_fib_1 beq Pass   # Find the 10th Fibonacci term. Tests recursion and stack pointer management.
beq_finder beq Pass   # Search through a list of 10 integers and find 0, return the index
bgez_1 bgez Pass   # Test that branch is taken when register value greater than 0. Test branch forwards.
bgez_2 bgez Pass   # Test that branch is taken when register value greater than 0. Test branch forwards.
bgez_3 bgez Pass   # Test that branch is taken when register value is equal to 0. Test branch forwards.
bgez_4 bgez Pass   # Test that branch is not taken when register value is less than 0.
bgez_5 bgez Pass   # Test branching backwards when greater than 0.
bgez_6 bgez Pass   # Test delay slot
bgezal_1 bgezal Pass   # Test branch works for greater than 0. Test branch forwards.
bgezal_2 bgezal Pass   # Test branch taken when register value greater than 0. Test link register $31 updates correctly. Test branch forwards.
bgezal_3 bgezal Pass   # Test branch works for equal to 0. Test branch forwards.
bgezal_4 bgezal Pass   # Test branch not taken when register value less than 0. Test link register $31 updates correctly.
bgezal_5 bgezal Pass   # Test branching backwards
bgezal_6 bgezal Pass   # Test delay slot
bgtz_1 bgtz Pass   # Test it doesn't branch when equal to 0. Test branch forwards
bgtz_2 bgtz Pass   # Test it branches when register value greater than 0. Test branch forwards.
bgtz_3 bgtz Pass   # Test it doesn't branch when equal to 0 and that registers are initialised to 0.
bgtz_4 bgtz Pass   # Test it doesn't branch when less than 0. Test branch forwards.
bgtz_5 bgtz Pass   # Test branching backwards wheb greater than 0.
bgtz_6 bgtz Pass   # Test delay slot
blez_1 blez Pass   # Test it branches when less than zero. Test branch forwards.
blez_2 blez Pass   # Test it doesn't branch when greater than 0.
blez_3 blez Pass   # Test it branches when equal to 0
blez_4 blez Pass   # Test it branches when less than zero.
blez_5 blez Pass   # Test branching backwards when less than 0.
blez_6 blez Pass   # Test delay slot
bltz_1 bltz Pass   # Test it doesn't branch when greater than 0.
bltz_2 bltz Pass   # Test it doesn't branch when greater than 0.
bltz_3 bltz Pass   # Test it doesn't branch when equal to 0.
bltz_4 bltz Pass   # Test it branches when less than 0. Test branch forwards.
bltz_5 bltz Pass   # Test branching backwards when less than 0
bltz_6 bltz Pass   # Test delay slot
bltzal_1 bltzal Pass   # Branch when negative
bltzal_2 bltzal Pass   # No branch when equal to 0. Test link register $31 updates correctly
bltzal_3 bltzal Pass   # No branch when positive. Test link register $31 updates correctly
bltzal_4 bltzal Pass   # Branch when negative. Test link register $31 updates correctly
bltzal_5 bltzal Pass   # Test branching backwards when less than zero.
bltzal_6 bltzal Pass   # Test delay slot
bne_1 bne Pass   # Test branch taken when 2 registers with 2 different values are compared. Test branch forwards.
bne_2 bne Pass   # Test branch taken when 2 registers with 2 different values are compared. Test branch forwards.
bne_3 bne Pass   # Test branch not taken when 2 registers with equal values are compared.
bne_4 bne Pass   # Test branch taken when 2 registers with 2 different values are compared. Test branch forwards.
bne_5 bne Pass   # Test branching backwards when 2 registers with 2 different values are compared.
bne_6 bne Pass   # Test delay slot
bne_7 bne Pass   #  Test branch not taken when register is compared with itself.
